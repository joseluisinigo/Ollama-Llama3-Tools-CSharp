====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Demo 2.csproj
====================================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <RootNamespace>Demo_2</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Serilog" Version="4.2.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <PackageReference Include="System.Text.Json" Version="9.0.2" />
  </ItemGroup>

</Project>




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Demo 2.sln
====================================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.2.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Demo 2", "Demo 2.csproj", "{6326AED0-0755-31E1-AA82-574AF42816D4}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{6326AED0-0755-31E1-AA82-574AF42816D4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6326AED0-0755-31E1-AA82-574AF42816D4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6326AED0-0755-31E1-AA82-574AF42816D4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6326AED0-0755-31E1-AA82-574AF42816D4}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {35A26957-4723-4C09-8F54-4F4B63650805}
	EndGlobalSection
EndGlobal




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Models\GenericOllamaModel.cs
====================================
using System;
using System.Threading.Tasks;
using Serilog;

namespace Models
{
    public class GenericOllamaModel : OllamaModelBase
    {
        public override async Task HandleRequestAsync(string model)
        {
            var messages = new[]
            {
                new { role = "user", content = "Dime un dato curioso sobre Madrid." }
            };

            var requestBody = new { model, messages };
            string responseString = await SendRequestAsync(model, requestBody);

            if (string.IsNullOrEmpty(responseString))
            {
                Log.Warning("‚ö†Ô∏è No se recibi√≥ respuesta v√°lida de Ollama.");
                return;
            }

            Log.Information("üì© Respuesta de {model}: {response}", model, responseString);
            Console.WriteLine($"üîπ Respuesta de {model}: {responseString}");
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Models\LlamaGroqToolUse.cs
====================================
using System;
using System.Text.Json;
using System.Threading.Tasks;
using Serilog;
using Tools;

namespace Models
{
    public class LlamaGroqToolUse : OllamaModelBase
    {
        public override async Task HandleRequestAsync(string model)
        {
            Log.Information("üì° Enviando solicitud a Ollama para el modelo {model}...", model);
            var requestBody = ConfigurationManager.GetRequestBody(model, "get_weather");
            string responseString = await SendRequestAsync(model, requestBody);

            if (string.IsNullOrEmpty(responseString))
            {
                Log.Warning("‚ö†Ô∏è No se recibi√≥ respuesta de Ollama.");
                return;
            }

            Log.Information("üì© Respuesta de Ollama recibida: {response}", responseString);
            var responseParts = responseString.Split('\n', StringSplitOptions.RemoveEmptyEntries);

            foreach (var part in responseParts)
            {
                try
                {
                    var responseJson = JsonDocument.Parse(part);
                    if (!responseJson.RootElement.TryGetProperty("message", out var messageElement))
                    {
                        Log.Warning("‚ö†Ô∏è La respuesta no contiene 'message'.");
                        continue;
                    }

                    if (!messageElement.TryGetProperty("tool_calls", out var toolCallsElement))
                    {
                        Log.Warning("‚ö†Ô∏è No se han solicitado herramientas en la respuesta.");
                        continue;
                    }

                    Log.Information("üîß Se detectaron herramientas en la respuesta.");
                    foreach (var toolCall in toolCallsElement.EnumerateArray())
                    {
                        var functionName = toolCall.GetProperty("function").GetProperty("name").GetString();
                        if (string.IsNullOrEmpty(functionName))
                        {
                            Log.Warning("‚ö†Ô∏è Se recibi√≥ una llamada a una herramienta sin nombre v√°lido.");
                            continue;
                        }

                        Log.Information("üõ†Ô∏è Llama3-Groq solicit√≥ la herramienta '{functionName}'", functionName);
                        var tool = ToolManager.GetToolByName(functionName);
                        if (tool == null)
                        {
                            Log.Error("‚ùå No se encontr√≥ la herramienta '{functionName}' en ToolManager.", functionName);
                            continue;
                        }

                        var argumentsJson = toolCall.GetProperty("function").GetProperty("arguments").ToString();
                        Log.Information("üîç Ejecutando herramienta '{functionName}' con argumentos: {argumentsJson}", functionName, argumentsJson);
                        var result = await tool.ExecuteAsync(argumentsJson);

                        Log.Information("‚úÖ Resultado de '{functionName}': {result}", functionName, result);
                        Console.WriteLine($"‚úÖ Resultado de la herramienta '{functionName}': {result}");
                    }
                }
                catch (JsonException ex)
                {
                    Log.Error("‚ùå Error en el JSON recibido: {error}. Datos recibidos: {json}", ex.Message, part);
                }
            }
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Models\OllamaModelBase.cs
====================================
using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Serilog;

namespace Models
{
    public abstract class OllamaModelBase
    {
        protected static readonly HttpClient client = new HttpClient();

        public abstract Task HandleRequestAsync(string model);

        protected async Task<string> SendRequestAsync(string model, object requestBody)
        {
            string jsonContent = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            try
            {
                var response = await client.PostAsync("http://localhost:11434/api/chat", content);
                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                Log.Error("‚ùå Error en la solicitud a Ollama: {error}", ex.Message);
                return string.Empty;
            }
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Program.cs
====================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Serilog;
using Models;
using Utils;

class Program
{
    static async Task Main(string[] args)
    {
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console()
            .WriteTo.File("logs.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();

        while (true)
        {
            Console.WriteLine("\nüìå Opciones disponibles:");
            Console.WriteLine("1. Elegir y ejecutar un modelo de Ollama");
            Console.WriteLine("2. Exportar c√≥digo del proyecto a 'code.txt'");
            Console.WriteLine("3. Salir");
            Console.Write("\nSelecciona una opci√≥n: ");

            string menuChoice = Console.ReadLine();

            switch (menuChoice)
            {
                case "1":
                    await RunOllamaModel();
                    break;
                case "2":
                    ExportProjectCode();
                    break;
                case "3":
                    Console.WriteLine("üëã Saliendo...");
                    return;
                default:
                    Console.WriteLine("‚ùå Opci√≥n no v√°lida, intenta de nuevo.");
                    break;
            }
        }
    }

    static async Task RunOllamaModel()
    {
        Log.Information("üöÄ Iniciando la interacci√≥n con Ollama...");

        var modelHandlers = new Dictionary<string, OllamaModelBase>
        {
            { "qwen2.5", new GenericOllamaModel() },
            { "mistral", new GenericOllamaModel() },
            { "gemma", new GenericOllamaModel() },
            { "llama3.2", new GenericOllamaModel() },
            { "llama3-groq-tool-use", new LlamaGroqToolUse() }
        };

        Console.WriteLine("\nModelos disponibles en Ollama:");
        int index = 1;
        foreach (var model in modelHandlers.Keys)
        {
            Console.WriteLine($"{index}. {model}");
            index++;
        }

        Console.Write("\nElige un modelo (1-5): ");
        int choice;
        while (!int.TryParse(Console.ReadLine(), out choice) || choice < 1 || choice > modelHandlers.Count)
        {
            Console.Write("Selecci√≥n no v√°lida. Elige un n√∫mero entre 1 y 5: ");
        }

        string selectedModel = new List<string>(modelHandlers.Keys)[choice - 1];
        Console.WriteLine($"‚úÖ Modelo seleccionado: {selectedModel}");

        await modelHandlers[selectedModel].HandleRequestAsync(selectedModel);
    }

    static void ExportProjectCode()
    {
        Console.WriteLine("üì§ Exportando c√≥digo...");
        CodeExporter.ExportCodeToTxt(Directory.GetCurrentDirectory());
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\ConfigurationManager.cs
====================================
using System;
using Tools.Prompts;
using Tools.Messages;

namespace Tools
{
    public static class ConfigurationManager
    {
        public static object GetRequestBody(string model, string toolName)
        {
            var tools = ToolDefinitionManager.GetAllToolDefinitions();

            return new
            {
                model,
                messages = new[]
                {
                    new { role = "system", content = PromptManager.GetSystemPrompt() },
                    new { role = "user", content = MessageManager.GetUserMessage(toolName) }
                },
                tools = tools.Length > 0 ? tools : null,  // Evita enviar un array vac√≠o
                stream = false
            };
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Definitions\StockPriceToolDefinition.cs
====================================
using System.Collections.Generic;

namespace Tools.Definitions
{
    public static class StockPriceToolDefinition
    {
        public static object GetDefinition()
        {
            return new
            {
                name = "get_stock_price",
                description = "Obtiene el precio actual de una acci√≥n",
                parameters = new
                {
                    type = "object",
                    properties = new Dictionary<string, object>
                    {
                        { "symbol", new { type = "string", description = "El s√≠mbolo de la acci√≥n (por ejemplo, AAPL, GOOGL)" } }
                    },
                    required = new[] { "symbol" }
                }
            };
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Definitions\WeatherToolDefinition.cs
====================================
using System.Collections.Generic;

namespace Tools.Definitions
{
    public static class WeatherToolDefinition
    {
        public static object GetDefinition()
        {
            return new
            {
                name = "get_weather",
                description = "Obtiene el clima actual de una ubicaci√≥n dada",
                parameters = new
                {
                    type = "object",
                    properties = new Dictionary<string, object>
                    {
                        { "location", new { type = "string", description = "El nombre de la ciudad o ubicaci√≥n" } }
                    },
                    required = new[] { "location" }
                }
            };
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\ITool.cs
====================================
using System.Threading.Tasks;

namespace Tools
{
    public interface ITool
    {
        string Name { get; }
        Task<string> ExecuteAsync(string argumentsJson);
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Messages\MessageManager.cs
====================================
using System.Collections.Generic;

namespace Tools.Messages
{
    public static class MessageManager
    {
        private static readonly Dictionary<string, string> messages = new Dictionary<string, string>
        {
            { "get_weather", WeatherMessage.GetMessage() },
            { "get_stock_price", StockPriceMessage.GetMessage() }
        };

        public static string GetUserMessage(string toolName)
        {
            return messages.ContainsKey(toolName) ? messages[toolName] : "¬øQu√© necesitas saber?";
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Messages\StockPriceMessage.cs
====================================
namespace Tools.Messages
{
    public static class StockPriceMessage
    {
        public static string GetMessage()
        {
            return "¬øCu√°l es el precio de la acci√≥n de Apple (AAPL)?";
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Messages\WeatherMessage.cs
====================================
namespace Tools.Messages
{
    public static class WeatherMessage
    {
        public static string GetMessage()
        {
            return "¬øCu√°l es el clima actual en Madrid?";
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Prompts\PromptManager.cs
====================================
using System.Collections.Generic;

namespace Tools.Prompts
{
    public static class PromptManager
    {
        private static readonly Dictionary<string, string> prompts = new Dictionary<string, string>
        {
            { "get_weather", WeatherPrompt.GetPrompt() },
            { "get_stock_price", StockPricePrompt.GetPrompt() }
        };

        public static string GetSystemPrompt()
        {
             return "Eres un asistente con acceso a herramientas. Si el usuario pregunta por informaci√≥n que puedes obtener usando una herramienta, usa la herramienta en lugar de responder directamente.";
        }

        public static string GetPromptForTool(string toolName)
        {
            return prompts.ContainsKey(toolName) ? prompts[toolName] : GetSystemPrompt();
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Prompts\StockPricePrompt.cs
====================================
namespace Tools.Prompts
{
    public static class StockPricePrompt
    {
        public static string GetPrompt()
        {
            return "Tienes acceso a herramientas. Usa 'get_stock_price' si preguntan por el precio de una acci√≥n.";
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\Prompts\WeatherPrompt.cs
====================================
namespace Tools.Prompts
{
    public static class WeatherPrompt
    {
        public static string GetPrompt()
        {
            return "Tienes acceso a herramientas. Usa 'get_weather' si preguntan por el clima.";
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\StockPriceTool.cs
====================================
using System;
using System.Text.Json;
using System.Threading.Tasks;

namespace Tools
{
    public class StockPriceTool : ITool
    {
        public string Name => "get_stock_price";

        public async Task<string> ExecuteAsync(string argumentsJson)
        {
            var arguments = JsonSerializer.Deserialize<StockArguments>(argumentsJson);
            if (arguments?.Symbol == null)
                return "‚ö†Ô∏è Error: No se proporcion√≥ un s√≠mbolo de acci√≥n v√°lido.";

            return await GetStockPriceAsync(arguments.Symbol);
        }

        private async Task<string> GetStockPriceAsync(string symbol)
        {
            await Task.Delay(500);
            var random = new Random();
            var price = random.Next(100, 500) + random.NextDouble();
            return $"El precio actual de {symbol} es ${price:F2}";
        }

        private class StockArguments
        {
            public string? Symbol { get; set; }
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\ToolDefinitionManager.cs
====================================
using System.Collections.Generic;
using Tools.Definitions;

namespace Tools
{
    public static class ToolDefinitionManager
    {
        public static object[] GetAllToolDefinitions()
        {
            return new object[]
            {
                WeatherToolDefinition.GetDefinition(),
                StockPriceToolDefinition.GetDefinition()
            };
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\ToolManager.cs
====================================
using System.Collections.Generic;
using System.Linq;
using Serilog;

namespace Tools
{
    public static class ToolManager
    {
        private static readonly List<ITool> tools = new List<ITool>
        {
            new WeatherTool(),
            new StockPriceTool()
        };

        public static ITool? GetToolByName(string name)
        {
            Log.Information("üîé Buscando herramienta '{name}' en ToolManager...", name);
            var tool = tools.FirstOrDefault(t => t.Name == name);
            
            if (tool == null)
            {
                Log.Warning("‚ö†Ô∏è Herramienta '{name}' no encontrada en ToolManager.", name);
            }
            else
            {
                Log.Information("‚úÖ Herramienta '{name}' encontrada en ToolManager.", name);
            }

            return tool;
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Tools\WeatherTool.cs
====================================
using System;
using System.Text.Json;
using System.Threading.Tasks;

namespace Tools
{
    public class WeatherTool : ITool
    {
        public string Name => "get_weather";

        public async Task<string> ExecuteAsync(string argumentsJson)
        {
            var arguments = JsonSerializer.Deserialize<WeatherArguments>(argumentsJson);
            if (arguments?.Location == null)
                return "‚ö†Ô∏è Error: No se proporcion√≥ una ubicaci√≥n v√°lida.";

            return await GetWeatherAsync(arguments.Location);
        }

        private async Task<string> GetWeatherAsync(string location)
        {
            await Task.Delay(500);
            var random = new Random();
            var temperature = random.Next(-10, 40);
            var conditions = new[] { "soleado", "nublado", "lluvioso", "nevando" };
            var condition = conditions[random.Next(conditions.Length)];
            return $"El clima actual en {location} es {condition} con una temperatura de {temperature}¬∞C.";
        }

        private class WeatherArguments
        {
            public string? Location { get; set; }
        }
    }
}




====================================
üìÑ Ruta: D:\Ollama-Llama3-Tools-CSharp\Demo 2\Utils\CodeExporter.cs
====================================
using System;
using System.IO;
using System.Linq;
using System.Text;

namespace Utils
{
    public static class CodeExporter
    {
        public static void ExportCodeToTxt(string rootDirectory)
        {
            string outputFile = Path.Combine(rootDirectory, "code.txt");

            try
            {
                StringBuilder sb = new StringBuilder();
                var files = Directory.GetFiles(rootDirectory, "*.*", SearchOption.AllDirectories)
                                     .Where(f => (f.EndsWith(".cs") || f.EndsWith(".json") || f.EndsWith(".csproj") || f.EndsWith(".sln")) &&
                                                 !f.Contains(@"\obj\") && !f.Contains(@"\bin\"))
                                     .OrderBy(f => f);

                foreach (var file in files)
                {
                    sb.AppendLine($"====================================");
                    sb.AppendLine($"üìÑ Ruta: {file}");
                    sb.AppendLine($"====================================");
                    sb.AppendLine(File.ReadAllText(file));
                    sb.AppendLine("\n\n");
                }

                File.WriteAllText(outputFile, sb.ToString());
                Console.WriteLine($"‚úÖ C√≥digo exportado a: {outputFile}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error al exportar el c√≥digo: {ex.Message}");
            }
        }
    }
}




